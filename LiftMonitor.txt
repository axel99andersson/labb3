package monitor;

import lift.*;
import Threads.*;

/**
 * - En person ska gå in/ut ur hissen per våning(?) 
 * - 
 * 
 * @author axelandersson
 *
 */
public class LiftMonitor {
	private LiftView view;
	private int floor;
	private boolean moving;
	private int direction;
	private int[] waitEntry;
	private int[] waitExit;
	private int load;
		
	public LiftMonitor(LiftView view) {
		this.view = view;
		this.floor = 0;
		this.moving = false;
		this.direction = 1;
		this.waitEntry = new int[7];
		this.waitExit = new int[7];
		this.load = 0;
	}
	
	//----------------------- Passenger methods ----------------------
	/**
	 * Signal to the lift that there is a new passenger
	 * @param floor: at floor floor
	 */
	public synchronized void passengerWaiting(int floor) {
		waitEntry[floor]++;
		view.showDebugInfo(waitEntry, waitExit);
		notifyAll();
	}
	/**
	 * Waits for the lift to arrive at the correct floor and checks if the passenger fits in the lift
	 * @param pass: Passenger
	 * @throws InterruptedException: because of wait()
	 */
	public synchronized void passengerEntry(Passenger pass) throws InterruptedException {
		while(floor != pass.getStartFloor() || moving || load >= 4) {
			wait();
		}
		waitExit[pass.getDestinationFloor()]++;
		view.showDebugInfo(waitEntry, waitExit);
		notifyAll();
	}
	/**
	 * Signals that a passenger is in the lift
	 * @param pass: Passenger
	 */
	public synchronized void passengerEntered(Passenger pass) {
		load++;
		waitEntry[floor]--;
		view.showDebugInfo(waitEntry, waitExit);
		notifyAll();
	}
	/**
	 * Waits for the lift to be on the correct destination-floor
	 * @param pass: Passenger
	 * @throws InterruptedException: because of wait()
	 */
	public synchronized void passengerExit(Passenger pass) throws InterruptedException {
		while(floor != pass.getDestinationFloor() || moving) {
			wait();
		}
		load--;
		waitExit[floor]--;
		view.showDebugInfo(waitEntry, waitExit);
	}
	/**
	 * Signaling to the lift that a passenger has exited the lift
	 * @param pass: Passenger
	 */
	public synchronized void passengerExited(Passenger pass) {
		waitExit[floor]--;
		notifyAll();
	}
	
	//------------------------ Lift methods ------------------------
	/**
	 * Retrieves the lifts current floor
	 * @return the floor (int)
	 */
	public synchronized int getFloor() {
		if(floor == 0) {
			direction = 1;
		} else if(floor == 6) {
			direction = -1;
		}
		return floor;
	}
	/**
	 * Sets the current floor and notifyAll()s other threads
	 * @param floor
	 */
	public synchronized void setFloor(int floor) {
		this.floor = floor;
		notifyAll();
	}
	/**
	 * Retrieves the direction the lift is currently going
	 * @return the direction (int)
	 */
	public synchronized int getDir() {
		return direction;
	}
	/**
	 * Sets the direction the lift is going in
	 * @param direction the desired direction
	 */
	public synchronized void setDir(int direction) {
		this.direction = direction;
	}
	/**
	 * Retrieves if the lift is moving or not
	 * @return moving (boolean)
	 */
	public synchronized boolean getMoving() {
		return moving;
	}
	/**
	 * Sets the moving attribute
	 * @param moving: boolean
	 */
	public synchronized void setMoving(boolean moving) {
		this.moving = moving;
		notifyAll();
	}
	/**
	 * Checks if there is any passengers
	 * @return boolean
	 */
	public synchronized boolean zeroPassengers() {
		for(int i= 0; i < 7; i++) {
			if(waitEntry[i] != 0)
				return false;
		}
		return true;
	}
	/**
	 * Method to call when the lift is waiting for passengers
	 * @throws InterruptedException because of wait()
	 */
	public synchronized void waitForPassenger() throws InterruptedException {
		while(zeroPassengers()) {
			wait();
		}
	}
	/**
	 * Stops the lift if there is any passengers on the current floor who
	 * wants to enter or exit and if there is room for more. NotifyAll():s other threads
	 * @return boolean
	 */
	public synchronized boolean stopLift() {
		if((waitEntry[floor] > 0 && load < 5) || waitExit[floor] > 0) {
			moving = false;
			notifyAll();
			return true;
		} return false;
	}
	/**
	 * Checks if the doors should be closed i.e if the passengers which should enter/exit
	 * has done so. NotifyAll():s other threads when done.
	 * @throws InterruptedException because of wait()
	 */
	public synchronized void closeDoors() throws InterruptedException {
		while(waitEntry[floor] != 0 && waitExit[floor] != 0) {
			wait();
		}
		moving = true;
		notifyAll();
	}
}